---
title: "green_paper"
author: "Krisna Gupta"
abstract: "awokawokawo"
jupyter: python3
format: 
  pdf:
    toc: false
    number-sections: true
    colorlinks: true
    documentclass: scrartcl
    papersize: a4
  html: 
    code-fold: true
  docx:
    toc: false
    number-sections: true
---

## Introduction

Some shit from @SEBK17 and @HDZ17 on calculation of cap n trade.

## Literature Review

kwoakoawkoakwokawo

## Method

Let $Q$ be a quantity produced by the Indonesian economy which is nested with a leontief production function with energy. That is, $Q=\min \{F(.),\Omega\}$, where $F$ is a combination of factors such as capital and labour. Let $\Omega$ be the total energy required to produce $Q$ in one period. The economy produces $\omega$ with a fully substitute sources:

$$
\omega=w_a+w_b+w_g
$$

where $w_a$ is the amount of clean energy used, while $w_b$ and $w_g$ are coal and gas respectively. if $p$ is a vector of prices of the three sources of energy and $w \in \{w_a,w_b,w_g\}$, producers in the economy are faced with a cost minimization problem to produce $Q$, and by extension, $\omega$.

$$
\begin{aligned}
\min_{w} \ &  p \cdot w \\
\mbox{subject to } \ & \omega=w_a+w_b+w_g
\end{aligned}
$$

In this setting, $\omega$ is taken as exogenous as the consequence of the Leontief production nest. That is, factor of production is the driver of $Q$ and consequently $\omega$. This assumption allows the use of the cost minimization technique and observe the cost impact of idiosyncratic shock to prices.

We improve this setting by adding emission constraints. We limit total emission coming from the use of each source of energy. Next, we limit how much the total combination of emissions from these sources is allowed. This variable, then, can be set exogenously to reflect the government's preference of emission.

Let $a,b,g$ be parameters which reflect emission generated per megawatt hour by $w_a, w_b, w_g$ respectively. Let $\varepsilon$ be the total emission generated by the Indonesian electricity sector, Then the total emission generated by these sources is:

$$
aw_a+bw_b+gw_g=\varepsilon
$$

With the above emission constraint, we have a complete linear system as follows:

$$
\begin{aligned}
\min_{W} \ &  p \cdot w \\
\mbox{subject to } \ & w_a+ w_b+ w_G \ge \omega \\
 & aw_a+bw_b+gw_g \le \varepsilon \\
 & w_a,w_b,w_g \ge 0\\
\end{aligned}
$$

The shock of the model can come from two exogenous variables $p$ which reflects a carbon tax, or $\varepsilon$ which reflects how much carbon quota is given in the economy as a whole.

The next step is to find a representative parameter. @pln is the main source of $\omega$ and $p \cdot w$. Perusahaan Listrk Negara (PLN) statistics is reliable since it is the sole distributor of electricity in Indonesia. According to @pln, Indonesia generates 279,511.24 Gigawatt hour (GWh) in 2021. From those, around 60% are produced using coal as its main source and around 23% by some mixes of fossil fuels. Only 17% is generated by renewables, mostly hydroelectric [@ember;@pln].

@pln also contains data on prices per Kilowatt hour of electricity based on sources. Total emission generated by the electricity sector is calculated based on the emission factor and how much energy source is used by the sector. Lastly, emission factor $a,b,g$ are calibrated from @febijanto10 and @jrc. The number of emission factor varies between countries and in different reports, and emission factor in this paper tries to balance those differences[^1].

[^1]: See appendix for a more complete codes and parameterisation used in this paper.

Also cekidot https://www.cnbcindonesia.com/news/20220119103739-4-308598/pajak-karbon-pltu-berlaku-april-2022-picu-tarif-listrik-naik

https://publications.jrc.ec.europa.eu/repository/handle/JRC21207

https://ebtke.esdm.go.id/post/2023/02/01/3414/rencana.pengembangan.pembangkit.nasional.beri.porsi.ebt.lebih.besar?lang=id

## Results and discussions

The linear setting in the previous section is trivial enough to be solved by linear programming method in Scipy [@quant]. Four different cases are considered in this paper.

| case | description | model setting |
| --- | ----- | ------------- |
| 1 | Status quo | current share of energy use |
| 2 | carbon tax | current share but carbon is taxed |
| 3 | long-run, no target | long run changes if emission target |
| 4 | long-run with aggresive target | like case 3 but with emission reduced by 27% |

```{python}
#| warning: false
#| error: false
import pandas as pd
import numpy as np
from scipy.optimize import linprog

class carbon:
  r"""
  implements the perfect substition of energy usage with prices and emission as the contraints. Note: the default emission is calculated by share of electricity generated times its emission factor.
  """
  
  def __init__(self, omega=279511240.0,  #MWh
                     e=217459744720.0,   #KgCO2
                     pa=1284440,         #Rp/MWh
                     pb=667880,          #Rp/MWh
                     pg=1247930,         #Rp/MWh
                     a=100,              #KgCO2/MWh
                     b=1000,             #KgCO2/MWh
                     g=700,              #KgCO2/MWh
                     ba=(0,None),
                     bb=(0,None),
                     bg=(0,None)
                     ):
    self.omega,self.e,self.pa,self.pb,self.pg,self.a,self.b,self.g=omega,e,pa,pb,pg,a,b,g
    self.ba,self.bb,self.bg=ba,bb,bg
    
  def hasil(self):
    omega,e,pa,pb,pg,a,b,g=self.omega,self.e,self.pa,self.pb,self.pg,self.a,self.b,self.g
    ba,bb,bg=self.ba,self.bb,self.bg
    # Construct parameters
    c_ex1 = np.array([pa,pb,pg])

    # Inequality constraints
    A_ex1 = np.array([[-1, -1,-1],
                  [a,b,g]])
    b_ex1 = np.array([-omega,e])

    bounds_ex2 = [ba,
                  bb,
                  bg]

    # Solve the problem
    # we put a negative sign on the objective as linprog does minimization
    res_ex1 = linprog(c_ex1, A_ub=A_ex1, b_ub=b_ex1,bounds=bounds_ex2)
    return res_ex1
  
  def biaya(self):
    omega,e,pa,pb,pg,a,b,g=self.omega,self.e,self.pa,self.pb,self.pg,self.a,self.b,self.g
    h=self.hasil()['x']
    v=np.array((pa,pb,pg))
    return print(f'total biaya pembangkit listrik adalah {h @ v} rupiah')
  
  def emisi(self):
    omega,e,pa,pb,pg,a,b,g=self.omega,self.e,self.pa,self.pb,self.pg,self.a,self.b,self.g
    h=self.hasil()['x']
    v=np.array((a,b,g))
    return print(f'total emisi adalah {h @ v} kgCO2')
  
  def energi(self):
    omega,e,pa,pb,pg,a,b,g=self.omega,self.e,self.pa,self.pb,self.pg,self.a,self.b,self.g
    sumber=('EBT','batubara','fosil lain')
    itung=self.hasil()['x']
    for i,j in zip(sumber,itung):
      print(f'jumlah energi dari {i} adalah {j} MWh')
    
```


## Reserves

```{python}
#| warning: false
#| error: false
import pandas as pd
import numpy as np
from scipy.optimize import linprog

omega=279511240.0 #MWh
E=619280000000.0 #KgCO2
ba=(0,None)
bb=(0,None)
# Construct parameters
c_ex1 = np.array([1284440, 667880])

# Inequality constraints
A_ex1 = np.array([[-1, -1],
                  [0,350]])
b_ex1 = np.array([-omega,E])

bounds_ex2 = [ba,
              bb]

# Solve the problem
# we put a negative sign on the objective as linprog does minimization
res_ex1 = linprog(c_ex1, A_ub=A_ex1, b_ub=b_ex1,bounds=bounds_ex2)

res_ex1
```

## 

## Bibliography
